int function100 ( void[99] param1 , int a, int b, int c)
{
    int abc;
    void _222;
    float name;
    char C;
    string ______;
    boolean _;

    int[0] aaa;
    void[12] hehe;
    float[10000] xd;
    char[400] name;
    string[4] ALL_CAPS;
    boolean[1] _1;

    // this comment does not match anything
}

float __statement_and_expression_tests__( ) 
//comment lol
{
    // match "Expr ;"
    ;;;;;;;; ;; ; ;   ;;;;
    this;
    many_spaces        ;

    two_lines
    ;

    // testing operators
    5 * 'r' ;
    "testing" + 34.11 ;
    3 - 10.0;
    ( arr(2, 2.0, 's') ) < identifier ;
    3.11 == arr(2, 2.0, "string") ;
    65 == 0.0 < "what" * "hello" - 'w' + 33.1 ;
    ("lots" * 5.3) == "of" - ("brackets" + 'd' < 44 == 0.0) ;

    arrayname [ 55 + "hahaha" ] ;
    listname (1, 1.1, "one", 'o', newlist(2, 2.2, true)) ;

    name[ ( biglist(list1(2, 3, 'a'), list2(4, 5, 'b'), list3() ) ) ];

    // if statements
    if ( newlist(3.0, "stringo", _('c', 'd', 'e')) ) {  }
    if ( newlist(3.0, "stringo", _('c', 'd', 'e')) )
    {
        abc[testing];
    }

    if ( newlist(3.0, "stringo", _('c', 'd', 'e')) )
    {
        abdc = abc[testing];
        _;
    }
    else 
    {
        abc[testing];
        3440;
        the = 1.0;
        _ = "---  ";
    }

    // nested if statements
    if (condition)
    {
        if (condition2) 
        {
            if (condition3)
            {
                while (_while_condition)
                {
                    num = 1;
                }
            }
        }
    }

    // match "id [ expr ] = expr ;"
    arrayname [ list (1, 2, 3.4, "string", l2(5.5, 'c', 'd'), "another string") ] = ( ( (4) ) ) ;
}

char more_keyword_statements ( boolean[10] _111 )
{
    // while statement, print, println, and return
    while ( ( ( ( ( lol ) ) ) ) )
    {
        statements_here;
        return ; 
        return id_name;
        return list(2, 3, 4, 5);

        print ( 21 );
        print (identifier);
        println("hello world" + 5.3 < 'u') ;
    }

    // id = expr ;
    __thing12345__ = 'a';
    __thing12345__ = 123;
    __thing12345__ = 3.4;
    __thing12345__ = "string haha";
    __thing12345__ = true;
    __thing12345__ = false;
    __thing12345__ = list(3, 'a', "asas", "yes", 3, 3, 3);

    // if [ expr ] = expr ;
    __thing12345__[something] = 'a';
    __thing12345__[something] = 123;
    __thing12345__["yes" + "no"] = 3.4;
    __thing12345__[4.0 == 'n'] = "string haha";
    __thing12345__[something] = true;
    __thing12345__[false < 55] = false;
    __thing12345__[something] = list(3, 'a', "asas", "yes", 3, 3, 3);
}

string[40] no_params ( ) 
{
    _this_is_id = another99id["stringlit"];
    name("stringyboy", false, 33.55, 'c', name2("another list", 5.222, 123, ' '));

    // testing all literals
    all_literals_list ( "string", 44, 12.0, 'b', true, false, another_list(false, false, (((false))))) ;
    
    // strings
    "this is a test fksladjf sadfljksad fdsjkf jfkas fkuasfk sa";
    "";
    " ";
    "ALL CAPITALS";

    // floats
    1000000000000000000.000000000000000000;
    0.2;
    00004234.5630000;

    // integers
    238437483;
    00000;
    1;

    // characters
    '2';
    '-';
    '_';
    ' ';

    true;
    false;
}



boolean[0] nothing ( ) 
{

}

